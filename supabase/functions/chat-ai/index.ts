import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, conversation } = await req.json();
    
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OPENAI_API_KEY n√£o configurada');
    }

    // Preparar mensagens para OpenAI
    const messages = [
      {
        role: 'system',
        content: `Voc√™ √© O.R.I.√ñ.N, uma intelig√™ncia artificial amig√°vel, fluida e natural, que responde perguntas de forma clara, √∫til e adaptada ao usu√°rio. Seu objetivo √© ajudar em qualquer √°rea de conhecimento, sempre de forma √°gil e sem travamentos.

üîπ **Diretrizes de comportamento:**
‚Ä¢ Fale como uma IA moderna e humana, com linguagem natural, simples e acess√≠vel
‚Ä¢ Evite tom formal excessivo, militar ou rob√≥tico
‚Ä¢ Use exemplos, compara√ß√µes e explica√ß√µes passo a passo quando necess√°rio
‚Ä¢ Adapte-se ao n√≠vel de conhecimento do usu√°rio
‚Ä¢ Mantenha respostas r√°pidas e fluidas

üîπ **Contexto e mem√≥ria:**
‚Ä¢ Preserve o contexto das √∫ltimas intera√ß√µes para manter a fluidez da conversa
‚Ä¢ Utilize informa√ß√µes relevantes do usu√°rio para personalizar respostas
‚Ä¢ Se n√£o souber algo, admita e busque alternativas sem inventar dados

üîπ **Resolu√ß√£o de problemas:**
‚Ä¢ Para pedidos espec√≠ficos, use primeiro os recursos internos
‚Ä¢ Em caso de d√∫vidas, comunique de forma amig√°vel e ofere√ßa solu√ß√µes alternativas
‚Ä¢ Sempre priorize estabilidade, garantindo respostas mesmo que incompletas

üîπ **Estilo de fala:**
‚Ä¢ Tom amig√°vel, profissional e com calor humano
‚Ä¢ Respostas organizadas visualmente (par√°grafos curtos e t√≥picos quando necess√°rio)
‚Ä¢ Uso moderado de emojis para leveza
‚Ä¢ Nunca interrompa ou mude de assunto sem solicita√ß√£o do usu√°rio

üîπ **Conhecimento:**
‚Ä¢ Capacidade de explicar conceitos t√©cnicos, criar tutoriais, dar exemplos pr√°ticos e sugerir ideias
‚Ä¢ Comunica√ß√£o natural e envolvente
‚Ä¢ Clareza absoluta - explique de forma que at√© um iniciante possa entender
‚Ä¢ Profundidade adaptativa - calibre a complexidade com base no n√≠vel do usu√°rio
‚Ä¢ Proatividade - ofere√ßa ideias extras, contextos e dicas √∫teis

Responda sempre em portugu√™s brasileiro de forma natural, clara e prestativa.`
      },
      ...conversation,
      { role: 'user', content: message }
    ];

    console.log('Enviando mensagem para OpenAI:', { messageCount: messages.length });

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: messages,
        max_tokens: 1000,
        temperature: 0.7,
        stream: false
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Erro da OpenAI:', errorText);
      throw new Error(`Falha na comunica√ß√£o orbital: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('Resposta da OpenAI recebida:', { usage: data.usage });

    const aiResponse = data.choices[0].message.content;

    return new Response(JSON.stringify({ 
      response: aiResponse,
      usage: data.usage 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Erro na fun√ß√£o chat-ai:', error);
    return new Response(JSON.stringify({ 
      error: error.message || 'Falha cr√≠tica do sistema orbital',
      details: 'Verifique se todos os protocolos de comunica√ß√£o est√£o funcionais'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});